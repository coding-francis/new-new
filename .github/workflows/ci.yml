name: CI/CD Pipeline

on:
  push:
    branches:
        main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  CI: true
  DATABASE_PASSWORD: randompassword
  DATABASE_NAME: testdb
  DATABASE_URL: postgresql://postgres:testpassword@localhost:5433/testdb
  APP_PORT: 8000
  CLOUDINARY_CLOUD_NAME: ${{secrets.CLOUDINARY_CLOUD_NAME}}
  CLOUDINARY_API_KEY: ${{secrets.CLOUDINARY_API_KEY}}
  CLOUDINARY_API_SECRET: ${{secrets.CLOUDINARY_API_SECRET}}
  CLOUDINARY_UPLOAD_PRESET: unit-test-preset
  CLOUDINARY_FOLDER: unit-test

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [unit-tests, integration-tests, linters]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Make sure docker-compose is installed
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Install dependencies
        run: npm install

      - name: Install ariga/atlas-go
        uses: ariga/setup-atlas@v0

      - name: Run ${{ matrix.job }}
        run: |
          # Run Linters
          if [ "${{ matrix.job }}" == "linters" ]; then
            npm run lint

          # Run Unit Tests
          elif [ "${{ matrix.job }}" == "unit-tests" ]; then
            npm run test:cov

          # Run Integration Tests
          elif [ "${{ matrix.job }}" == "integration-tests" ]; then
            npm run inttest:cov
          fi

      - name: Upload coverage reports
        if: ${{ matrix.job == 'unit-tests' }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: coverage/*

      - name: Upload integration coverage reports
        if: ${{ matrix.job == 'integration-tests' }}
        uses: actions/upload-artifact@v2
        with:
          name: integration-coverage-reports
          path: coverage-integration/*

  deploy-coverage-report:
    name: Deploy Coverage Report
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install curl
        run: sudo apt-get install -y curl
    
      - name: Download coverage reports
        uses: actions/download-artifact@v2
        with:
            name: coverage-reports
            path: coverage

      - name: Deploy coverage reports to Cloudinary
        run: |
          for file in coverage/*; do
            curl -X POST "https://api.cloudinary.com/v1_1/${{ env.CLOUDINARY_CLOUD_NAME }}/upload" \
              -u "${{ env.CLOUDINARY_API_KEY }}:${{ env.CLOUDINARY_API_SECRET }}" \
              -F "file=@$file" \
              -F "upload_preset=${{ env.CLOUDINARY_UPLOAD_PRESET }}" \
              -F "folder=${{ env.CLOUDINARY_FOLDER }}"
          done

    #  - name: Deploy integration coverage reports to Cloudinary
    #    if: ${{ matrix.job == 'integration-tests' }}
    #    run: |
    #      for file in coverage-integration/*; do
    #        curl -X POST "https://api.cloudinary.com/v1_1/${{ env.CLOUDINARY_CLOUD_NAME }}/upload" \
    #          -u "${{ env.CLOUDINARY_API_KEY }}:${{ env.CLOUDINARY_API_SECRET }}" \
    #          -F "upload_preset=${{ env.CLOUDINARY_UPLOAD_PRESET }}" \
    #          -F "folder=${{ env.CLOUDINARY_FOLDER }}"
    #      done
